% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BinaryOutModelClass.R
\docType{class}
\name{BinaryOutModel}
\alias{BinaryOutModel}
\title{R6 class for modeling (fitting and predicting) for a single binary regression model P(B | PredVars)}
\format{An \code{\link{R6Class}} generator object}
\usage{
BinaryOutModel
}
\description{
\code{BinaryOutModel} can store and manage the (binarize/ discretized) design matrix Xmat and the outcome Bin for the binary regression 
 P(B|Xmat). It provides argument \code{self$estimator} to include different candidate estimators in the fitting and predicting library,  
 such as data-adaptive super learner algorithms and parametric logistic regression. When fitting one pooled regression across multiple 
 bins, it provides method to convert data from wide to long format when requested (to gain computational efficiency).
}
\details{
\itemize{
\item{bin_names} - Character vector of names of the bins.
\item{ID} - Integer vector of observation IDs used for pooling. \code{1:n}.
\item{pooled_bin_name} - Original name of the continuous covariate that was discretized into bins and then pooled.
\item{nbins} - Number of bins used for estimation of a continuous outvar, defined in ContinModel$new().
\item{estimator} - Character, one of "speedglm__glm" (default), "glm__glm", "h2o__ensemble", "SuperLearner".
\item{outvar} - Character, outcome name.
\item{predvars} - Character vector of predictor names.
\item{cont.sVar.flag} - Logical. If TRUE, indicate the original outcome variable is continuous.
\item{bw.j} - Bin width of a bin indicator obtained from the discretization of a continous covariate.
\item{is.fitted} - Logical. If TRUE, indicate the \code{BinaryOutModel} class object is fitted already.
\item{pool_cont} - Logical. If TRUE, perform pooling of bins.
\item{outvars_to_pool} - Character vector of outcome bin names for pooling.
\item{ReplMisVal0} - Logical. If TRUE, replace all gvars$misval among predictors with user-supplied gvars$misXreplace (Default to 0).
\item{n} - Number of rows in the input data.
\item{subset_expr} - Vector of length \code{n} that specifies a subset of data to be used in the fitting process. 
  Either logical, expression or indices.
\item{subset_idx} - Logical version of \code{subset_expr}. 
}
}
\section{Methods}{

\describe{
  \item{\code{new(reg)}}{Use \code{reg} (a \code{\link{RegressionClass}} class object) to instantiate an new object of \code{BinaryOutModel} 
   for a single binary regression.}
  \item{\code{newdata(newdata, getoutvar = TRUE, ...)}}{...}
  \item{\code{define.subset.idx(data)}}{...}
  \item{\code{fit(overwrite = FALSE, data, predict = FALSE, savespace = TRUE, ...)}}{...}
  \item{\code{copy.fit(bin.out.model)}}{...}
  \item{\code{predict(newdata, savespace = TRUE, ...)}}{...}
  \item{\code{copy.predict(bin.out.model)}}{...}
  \item{\code{predictAeqa(newdata, bw.j.sA_diff, savespace = TRUE, wipeProb = TRUE)}}{...}
  \item{\code{show()}}{Print regression formula, including outcome and predictor names}
}
}

\section{Active Bindings}{

\describe{
  \item{\code{wipe.alldat(wipeProb = TRUE)}}{...}
  \item{\code{getfit}}{...}
  \item{\code{getprobA1}}{...}
  \item{\code{getprobAeqa}}{...}
  \item{\code{emptydata}}{...}
  \item{\code{emptyY}}{...}
  \item{\code{emptyWeight}}{...}
  \item{\code{emptySubset_idx}}{...}
  \item{\code{getXmat}}{...}
  \item{\code{getY}}{...}
  \item{\code{getWeight}}{...}
}
}

\keyword{R6}
\keyword{class}
